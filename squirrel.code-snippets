{
    // Consts
    "CharacterBone":
    {
        "prefix": "CharacterBone",
        "body": "CharacterBone.${1|Head,Neck,Pelvis,Spine,Spine1,Spine2,Spine3,L_Calf,L_Clavicle,L_Foot,L_Forearm,L_ForeTwist,L_Hand,L_Prop,L_Thigh,L_UpperArm,R_Calf,R_Clavicle,R_Foot,R_Forearm,R_ForeTwist,R_Hand,R_Prop,R_Thigh,R_UpperArm|}$0"
    },
    "PropBone":
    {
        "prefix": "PropBone",
        "body": "PropBone.${1|AttachSync,Grip_L_Elbow,Grip_L_Hand,Grip_L_Shoulder,Grip_R_Elbow,Grip_R_Hand,Grip_R_Shoulder,Head,HeadSync|}$0"
    },

    // Enums
    "AIObjective":
    {
        "prefix": "AIObjective",
        "body": "AIObjective.${1|None,AttackTarget,AttackNearbyTarget,AttackWhenSeeTarget,AttackWhenStealthTargetSpotted,AttackUsingCover,AttackInScriptedVehicle,ShootAtMarket,Flee,FleeSpreadPanic,ForceEnterCover,RunLaterallyFromTarget,InvestigateTarget,PursuitTarget,FollowTarget,FaceTarget,FaceTargetWhileScared,BeAlly,GetInVehicle,GetOutOfVehicle,BeIntimidated,PathFindToSelectedObject,HijackVehicle,Idle,MoveAway,RunAway,GrabAndHold,DuckAndCover,Denouement,WeaponPickup,CombatDummy,PathFindToPointWithBreakout,CombatFastTalk,AttackSuckerPunchTarget,RobTarget,PatDownTarget|}$0"
    },
    "CharacterOccupantState":
    {
        "prefix": "Gender",
        "body": "Gender.${1|None,EnterExit,Sitting|}$0"
    },
    "FactionClass":
    {
        "prefix": "FactionClass",
        "body": "FactionClass.${1|Invalid,Indifferent,Player,Law,Triad_Winston,Triad_Dogeyes,Triad_Sonny,Triad_Jiiang,Triad_Cheuk\n,Triad_TwoChin,Triad_Generic,Triad_WaterStreet,Triad_18K,Triad_Dogboys,Triad_SunOnYee,Triad_Lee,Bouncer,Innocent,Student,Ambient_Aggressive,Ambient_Group1,Ambient_Group2,Ambient_Group3,Ambient_Group4,Network_Team1,Network_Team2,Network_Team3,Network_Team4,Network_Team5,Network_Team6,Network_Team7,Network_Team8,Hostile_Special1,Hostile_Special2,Allied_Special1,Allied_Special2,Law_Hostile,Rooster1,Rooster2|}$0"
    },
    "FightingClass":
    {
        "prefix": "FightingClass",
        "body": "FightingClass.${1|Invalid,None,NonCombatant,Striker,StrikerQuick,StrikerBrawler,Grappler,Tutorial,Enforcer,Elite|}$0"
    },
    "MissionProgressState":
    {
        "prefix": "MissionProgressState",
        "body": "MissionProgressState.${1|Invalid,Normal,Danger,Complete,Incomplete,AnimateComplete|}$0"
    },
    "GameSliceState":
    {
        "prefix": "GameSliceState",
        "body": "GameSliceState.${1|Locked,Unlocked,Restoring,Started,Completed|}$0"
    },
    "Gender":
    {
        "prefix": "Gender",
        "body": "Gender.${1|Invalid,Male,Female|}$0"
    },
    "TargetType":
    {
        "prefix": "TargetType",
        "body": "TargetType.${1|Invalid,Self,Attacker,AimPosition,VehicleDriver,VehiclePassenger,VehiclePassenger2,VehiclePassenger3,VehiclePassenger4,VehicleRoleSwapTemp,VehicleCargo1,VehicleCargo2,VehicleCargo3,VehiclePassengerTrunk,ClosestPed,CoverObject,CoverPopout,Equipped,EquippedLeftHand,EquippedHat,EquippedGlasses,Facing,Focus,Grapple,LookAt,PoiLookAt,PoiUse,PoiParentObject,Vehicle,AIObjective,ToFollow,Player,ScriptedMarker,StimulusProducer,ConditionStimulusProducer,IgnoreAvoidance,LastThreat,PointAt,Attacking,Conversation,InteractiveProp,PickupItem,StowedWeapon,Stowed2HWeapon,VehicleActionHijack,VehicleActionHijackPotential,VehicleClosestPoint,ClosestDownedPed,Directional,Physical,Social,CrowdPushPrimary,CrowdPushSecondary,Escort,Owner,LastCreatedObject,SubTarget,Transit,WorldEditorSelectedObject,CraneContainerAttached,CraneContainerUnattached,MySpawnPoint,GroupLeader,GroupMember,GroupMember2,GroupMember3,GroupMember4,GroupMemberPaired,BestInteractionPoint,InteractionPoint0,InteractionPoint1,InteractionPoint2,InteractionPoint3,InteractionPoint4,InteractionPoint5,HijackableVehicle,Sync,BestMeleeAttacker,LastAttacked,InteractionOffset,Transaction,LastGrapple,ProbeLowL,ProbeLowC,ProbeLowR,ProbeMidL,ProbeMidC,ProbeMidR,ProbeHighL,ProbeHighC,ProbeHighR|}$0"
    },
    "SimObjectType":
    {
        "prefix": "SimObjectType",
        "body": "SimObjectType.${1|IAIPathMarker,AIJumpPoint,AIOutlineRegion,AISeedPoint,AudioEmitterMarker,AudioTriggerRegion,BoostRegion,Camera,CameraMarker,Character,Collectible,CombatRegion,CopRoadBlock,Director,Door,DynamicLight,FleeToPoint,FXSimComponent,HidingSpot,HijackReturn,InterestPoint,IrradianceVolume,Marker,MarkerProgressionTrigger,MarkerRaceStartingGrid,MeleeScriptSystem,ModelAsset,NISScriptSystem,ParkingSpot,Prefab,Prop,ReinforcementPoint,TrafficRegion,TriggerRegion,Turf,Vehicle,Weapon,WeaponSpawner,StartRegion,SpawnPoint,SpawnPointProgressionTrigger,SpawnRegion|}$0"
    },
    "UIButton":
    {
        "prefix": "UIButton",
        "body": "UIButton.${1|Invalid,Accept,Back,Button1,Button2,Start,Select,L1,R1,L2,R2,L3,R3,L1R1,L2R2,DPAD_Up,DPAD_Down,DPAD_Left,DPAD_Right,DPAD_LR,DPAD_UD,L_Stick,R_Stick,L_Stick_LR,L_Stick_UD,R_Stick_LR,R_Stick_UD,Accept_Hold,Back_Hold,Button1_Hold,Button2_Hold,L1_Hold,R1_Hold,L2_Hold,R2_Hold,F1,Wheel_Up,Wheel_Down|}$0"
    },
    "VirtualKey":
    {
        "prefix": "VirtualKey",
        "body": "VirtualKey.${1|MouseLeft,MouseRight,MouseMiddle,MouseX1,MouseX2,Backspace,Tab,Enter,Pause,CapsLock,Escape,Space,PageUp,PageDown,End,Home,LeftArrow,UpArrow,RightArrow,DownArrow,PrintScreen,Insert,Delete,0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,LeftWin,RightWin,Menu,Numpad0,Numpad1,Numpad2,Numpad3,Numpad4,Numpad5,Numpad6,Numpad7,Numpad8,Numpad9,NumpadMultiply,NumpadAdd,NumpadSubtract,NumpadDecimal,NumpadDivide,F1,F2,F3,F4,F5,F6,F7,F8,F9,F10,F11,F12,NumLock,ScrollLock,LeftShift,RightShift,LeftCtrl,RightCtrl,LeftAlt,RightAlt,Semicolon,Equal,Comma,Minus,Period,Slash,GraveAccent,LeftBracket,Backslash,RightBracket,Apostrophe|}$0"
    },

    // Color
    "Color()":
    {
        "prefix": "Color",
        "body": "Color(${r}, ${g}, ${b}, ${a})$0"
    },

    // Vector2
    "Vector2()":
    {
        "prefix": "Vector2",
        "body": "Vector2(${x}, ${y})$0"
    },
    "Vector2.Add()":
    {
        "prefix": [ "Vector2.Add", "Add" ],
        "body": "Add(Vector2(${x}, ${y}))$0"
    },
    "Vector2.Subtract()":
    {
        "prefix": [ "Vector2.Subtract", "Subtract" ],
        "body": "Subtract(Vector2(${x}, ${y}))$0"
    },
    "Vector2.Multiply()":
    {
        "prefix": [ "Vector2.Multiply", "Multiply" ],
        "body": "Multiply(${value})$0"
    },
    "Vector2.Divide()":
    {
        "prefix": [ "Vector2.Divide", "Divide" ],
        "body": "Divide(${value})$0"
    },
    "Vector2.Equals(): boolean":
    {
        "prefix": [ "Vector2.Equals", "Equals" ],
        "body": "Equals(Vector2(${x}, ${y}))$0"
    },
    "Vector2.Length(): float":
    {
        "prefix": [ "Vector2.Length", "Length" ],
        "body": "Length()$0"
    },
    "Vector2.Normalize()":
    {
        "prefix": [ "Vector2.Normalize", "Normalize" ],
        "body": "Normalize()$0"
    },
    "Vector2.DistTo(): float":
    {
        "prefix": [ "Vector2.DistTo", "DistTo" ],
        "body": "DistTo(Vector2(${x}, ${y}))$0"
    },

    // Vector3
    "Vector3()":
    {
        "prefix": "Vector3",
        "body": "Vector3(${x}, ${y}, ${z})$0"
    },
    "Vector3.Add()":
    {
        "prefix": [ "Vector3.Add", "Add" ],
        "body": "Add(Vector3(${x}, ${y}, ${z}))$0"
    },
    "Vector3.Subtract()":
    {
        "prefix": [ "Vector3.Subtract", "Subtract" ],
        "body": "Subtract(Vector3(${x}, ${y}, ${z}))$0"
    },
    "Vector3.Multiply()":
    {
        "prefix": [ "Vector3.Multiply", "Multiply" ],
        "body": "Multiply(${value})$0"
    },
    "Vector3.Divide()":
    {
        "prefix": [ "Vector3.Divide", "Divide" ],
        "body": "Divide(${value})$0"
    },
    "Vector3.Equals(): boolean":
    {
        "prefix": [ "Vector3.Equals", "Equals" ],
        "body": "Equals(Vector3(${x}, ${y}, ${z}))$0"
    },
    "Vector3.Length(): float":
    {
        "prefix": [ "Vector3.Length", "Length" ],
        "body": "Length()$0"
    },
    "Vector3.Normalize()":
    {
        "prefix": [ "Vector3.Normalize", "Normalize" ],
        "body": "Normalize()$0"
    },
    "Vector3.DistTo(): float":
    {
        "prefix": [ "Vector3.DistTo", "DistTo" ],
        "body": "DistTo(Vector3(${x}, ${y}, ${z}))$0"
    },

    // Config
    "Config.IsEmpty(): boolean":
    {
        "prefix": "Config.IsEmpty",
        "body": "Config.IsEmpty()$0"
    },
    "Config.KeyExists(): boolean":
    {
        "prefix": "Config.KeyExists",
        "body": "Config.KeyExists(${section}, ${key})$0"
    },
    "Config.GetAllSections(): array[string]":
    {
        "prefix": "Config.GetAllSections",
        "body": "Config.GetAllSections()$0"
    },
    "Config.GetAllKeys(): array[string]":
    {
        "prefix": "Config.GetAllKeys",
        "body": "Config.GetAllKeys(${section})$0"
    },
    "Config.GetBoolean(): boolean":
    {
        "prefix": "Config.GetBoolean",
        "body": "Config.GetBoolean(${section}, ${key}, ${default})$0"
    },
    "Config.SetBoolean()":
    {
        "prefix": "Config.SetBoolean",
        "body": "Config.SetBoolean(${section}, ${key}, ${value})$0"
    },
    "Config.GetInteger(): integer":
    {
        "prefix": "Config.GetInteger",
        "body": "Config.GetInteger(${section}, ${key}, ${default})$0"
    },
    "Config.SetInteger()":
    {
        "prefix": "Config.SetInteger",
        "body": "Config.SetInteger(${section}, ${key}, ${value})$0"
    },
    "Config.GetHexadecimal(): hexadecimal":
    {
        "prefix": "Config.GetHexadecimal",
        "body": "Config.GetHexadecimal(${section}, ${key}, ${default})$0"
    },
    "Config.SetHexadecimal()":
    {
        "prefix": "Config.SetHexadecimal",
        "body": "Config.SetHexadecimal(${section}, ${key}, ${value})$0"
    },
    "Config.GetFloat(): float":
    {
        "prefix": "Config.GetFloat",
        "body": "Config.GetFloat(${section}, ${key}, ${default})$0"
    },
    "Config.SetFloat()":
    {
        "prefix": "Config.SetFloat",
        "body": "Config.SetFloat(${section}, ${key}, ${value})$0"
    },
    "Config.GetString(): string":
    {
        "prefix": "Config.GetString",
        "body": "Config.GetString(${section}, ${key}, ${default})$0"
    },
    "Config.SetString()":
    {
        "prefix": "Config.SetString",
        "body": "Config.SetString(${section}, ${key}, ${value})$0"
    },
    "Config.Delete(): boolean":
    {
        "prefix": "Config.Delete",
        "body": "Config.Delete(${section}, ${key})$0"
    },


    // Console
    "Console.AddCommand()":
    {
        "prefix": "Console.AddCommand",
        "body": "Console.AddCommand(${name}, ${description}, ${usage}, ${numargs}, ${callback})$0"
    },
    "Console.RemoveCommand()":
    {
        "prefix": "Console.RemoveCommand",
        "body": "Console.RemoveCommand(${name})$0"
    },
    "Console.Print()":
    {
        "prefix": "Console.Print",
        "body": "Console.Print(${text}, Color(${r}, ${g}, ${b}, ${a}), ${sameline})$0"
    },

    // Font
    "Font.GetDefault(): Font":
    {
        "prefix": "Font.GetDefault",
        "body": "Font.GetDefault()$0"
    },
    "Font.Add(): Font":
    {
        "prefix": "Font.Add",
        "body": "Font.Add(${name}, ${size})$0"
    },
    "Font.Remove()":
    {
        "prefix": [ "Font.Remove", "Remove" ],
        "body": "Remove()$0"
    },
    "Font.GetTextSize(): Vector2":
    {
        "prefix": [ "Font.GetTextSize", "GetTextSize" ],
        "body": "GetTextSize(${text})$0"
    },
    "Font.size: float":
    {
        "prefix": [ "Font.size", "size" ],
        "body": "size$0"
    },

    // Hash
    "Hash()":
    {
        "prefix": "Hash",
        "body": "Hash(${text})$0"
    },
    "Hash.Get(): hexadecimal":
    {
        "prefix": "Hash.Get",
        "body": "Hash.Get(${text})$0"
    },
    "Hash.value: hexadecimal":
    {
        "prefix": [ "Hash.value", "value" ],
        "body": "value$0"
    },

    // Image
    "Image.Add(): Image":
    {
        "prefix": "Image.Add",
        "body": "Image.Add(${name}, ${size})$0"
    },
    "Image.Remove()":
    {
        "prefix": [ "Image.Remove", "Remove" ],
        "body": "Remove()$0"
    },
    "Image.size: Vector2":
    {
        "prefix": [ "Image.size", "size" ],
        "body": "size$0"
    },

    // Input
    "Input.IsKeyDown(): boolean":
    {
        "prefix": "Input.IsKeyDown",
        "body": "Input.IsKeyDown(${VirtualKey})$0"
    },
    "Input.GetKeyDownDuration(): float":
    {
        "prefix": "Input.GetKeyDownDuration",
        "body": "Input.GetKeyDownDuration(${VirtualKey})$0"
    },
    "Input.GetMousePosition(): Vector2":
    {
        "prefix": "Input.GetMousePosition",
        "body": "Input.GetMousePosition()$0"
    },

    // Renderer
    "Renderer.GetScreenSize(): Vector2(x, y)":
    {
        "prefix": "Renderer.GetScreenSize",
        "body": "Renderer.GetScreenSize()$0"
    },
    "Renderer.SetRounding()":
    {
        "prefix": "Renderer.SetRounding",
        "body": "Renderer.SetRounding(${value}, ${tl}, ${tr}, ${bl}, ${br})$0"
    },
    "Renderer.SetThickness()":
    {
        "prefix": "Renderer.SetThickness",
        "body": "Renderer.SetThickness(${value})$0"
    },
    "Renderer.SetTextAlign()":
    {
        "prefix": "Renderer.SetTextAlign",
        "body": "Renderer.SetTextAlign(${1|/* Left */0,/* Center */1,/* Right */2|})$0"
    },
    "Renderer.AddLine()":
    {
        "prefix": "Renderer.AddLine",
        "body": "Renderer.AddLine(Vector2(${from_x}, ${from_y}), Vector2(${to_x}, ${to_y}), Color(${r}, ${g}, ${b}, ${a}))$0"
    },
    "Renderer.AddRect()":
    {
        "prefix": "Renderer.AddRect",
        "body": "Renderer.AddRect(Vector2(${from_x}, ${from_y}), Vector2(${to_x}, ${to_y}), Color(${r}, ${g}, ${b}, ${a}))$0"
    },
    "Renderer.AddRectFilled()":
    {
        "prefix": "Renderer.AddRectFilled",
        "body": "Renderer.AddRectFilled(Vector2(${from_x}, ${from_y}), Vector2(${to_x}, ${to_y}), Color(${r}, ${g}, ${b}, ${a}))$0"
    },
    "Renderer.AddImage()":
    {
        "prefix": "Renderer.AddImage",
        "body": "Renderer.AddImage(${Image}, Vector2(${position_x}, ${position_y}), Vector2(${size_x}, ${size_y}), Color(${r}, ${g}, ${b}, ${a}))$0"
    },
    "Renderer.AddText()":
    {
        "prefix": "Renderer.AddText",
        "body": "Renderer.AddText(${Font}, Vector2(${position_x}, ${position_y}), Color(${r}, ${g}, ${b}, ${a}), ${text})$0"
    },
    "Renderer.AddTextShadow()":
    {
        "prefix": "Renderer.AddTextShadow",
        "body": "Renderer.AddTextShadow(${Font}, Vector2(${position_x}, ${position_y}), Color(${r}, ${g}, ${b}, ${a}), ${text})$0"
    },

    // Timer
    "Timer.Add(): Timer":
    {
        "prefix": "Timer.Add",
        "body": "Timer.Add(${callback}, ${delay})$0"
    },
    "Timer.Destroy()":
    {
        "prefix": [ "Timer.Destroy", "Destroy" ],
        "body": "Destroy()$0"
    },
    "Timer.remaining: float":
    {
        "prefix": [ "Timer.remaining", "remaining" ],
        "body": "remaining$0"
    },

    // Audio
    "Audio.PlaySound(): boolean":
    {
        "prefix": "Audio.PlaySound",
        "body": "Audio.PlaySound(${bank}, ${name})$0"
    },
    "Audio.StopSound()":
    {
        "prefix": "Audio.StopSound",
        "body": "Audio.StopSound(${name})$0"
    },
    "Audio.PlaySpeech(): boolean":
    {
        "prefix": "Audio.PlaySpeech",
        "body": "Audio.PlaySpeech(${SimCharacter}, ${event}, ${name})$0"
    },
    "Audio.StopSpeech()":
    {
        "prefix": "Audio.StopSpeech",
        "body": "Audio.StopSpeech(${SimCharacter})$0"
    },

    // Camera
    "Camera.GetType(): string":
    {
        "prefix": "Camera.GetType",
        "body": "Camera.GetType()$0"
    },
    "Camera.IsScriptCameraOn(): boolean":
    {
        "prefix": "Camera.IsScriptCameraOn",
        "body": "Camera.IsScriptCameraOn()$0"
    },
    "Camera.ToggleScriptCamera()":
    {
        "prefix": "Camera.ToggleScriptCamera",
        "body": "Camera.ToggleScriptCamera(${toggle})$0"
    },
    "Camera.SetScriptCameraEyeLook()":
    {
        "prefix": "Camera.SetScriptCameraEyeLook",
        "body": "Camera.SetScriptCameraEyeLook(Vector3(${eye_x}, ${eye_y}, ${eye_z}), Vector3(${look_x}, ${look_y}, ${look_z}), ${duration})$0"
    },
    "Camera.SetScriptCameraDOF()":
    {
        "prefix": "Camera.SetScriptCameraDOF",
        "body": "Camera.SetScriptCameraDOF(${focaldistance}, ${focusrange}, ${nearblendrange}, ${nearblurradius}, ${farblendrange}, ${farblendradius})$0"
    },
    "Camera.ResetScriptCameraDOF()":
    {
        "prefix": "Camera.ResetScriptCameraDOF",
        "body": "Camera.ResetScriptCameraDOF()$0"
    },
    "Camera.FOV: float":
    {
        "prefix": "Camera.FOV",
        "body": "Camera.FOV$0"
    },
    "Camera.OverrideFOV: float":
    {
        "prefix": "Camera.OverrideFOV",
        "body": "Camera.OverrideFOV$0"
    },
    "Camera.EnableOverrideFOV: boolean":
    {
        "prefix": "Camera.EnableOverrideFOV",
        "body": "Camera.EnableOverrideFOV$0"
    },

    // CollisionData
    "CollisionData.Position: Vector3":
    {
        "prefix": [ "CollisionData.Position", "Position" ],
        "body": "Position$0"
    },
    "CollisionData.SimObject: SimObject":
    {
        "prefix": [ "CollisionData.SimObject", "SimObject" ],
        "body": "SimObject$0"
    },
    "CollisionData.SimObjectCollider: SimObject":
    {
        "prefix": [ "CollisionData.SimObjectCollider", "SimObjectCollider" ],
        "body": "SimObjectCollider$0"
    },
    "CollisionData.Velocity: Vector3":
    {
        "prefix": [ "CollisionData.Velocity", "Velocity" ],
        "body": "Velocity$0"
    },
    "CollisionData.VelocityCollider: Vector3":
    {
        "prefix": [ "CollisionData.VelocityCollider", "VelocityCollider" ],
        "body": "VelocityCollider$0"
    },

    // GameInput
    "GameInput.Enable: boolean":
    {
        "prefix": "GameInput.Enable",
        "body": "GameInput.Enable$0"
    },

    // GameSlice
    "GameSlice.ForceLock()":
    {
        "prefix": [ "GameSlice.ForceLock", "ForceLock" ],
        "body": "Destroy()$0"
    },
    "GameSlice.State: GameSliceState":
    {
        "prefix": [ "GameSlice.State", "State" ],
        "body": "State$0"
    },

    // Hud
    "Hud.ShowActionButton()":
    {
        "prefix": "Hud.ShowActionButton",
        "body": "Hud.ShowActionButton(${text}, ${UIButton}, ${actiontype})$0"
    },
    "Hud.ShowActionButtonOneFrame()":
    {
        "prefix": "Hud.ShowActionButtonOneFrame",
        "body": "Hud.ShowActionButtonOneFrame(${text}, ${UIButton}, ${actiontype})$0"
    },
    "Hud.HideActionButton()":
    {
        "prefix": "Hud.HideActionButton",
        "body": "Hud.HideActionButton()$0"
    },
    "Hud.SetMissionHealthVisible()":
    {
        "prefix": "Hud.SetMissionHealthVisible",
        "body": "Hud.SetMissionHealthVisible(${boolean})$0"
    },
    "Hud.SetMissionHealthCaption()":
    {
        "prefix": "Hud.SetMissionHealthCaption",
        "body": "Hud.SetMissionHealthCaption(${text})$0"
    },
    "Hud.SetMissionHealthValue()":
    {
        "prefix": "Hud.SetMissionHealthValue",
        "body": "Hud.SetMissionHealthValue(${value})$0"
    },
    "Hud.SetMissionHealthSuccess()":
    {
        "prefix": "Hud.SetMissionHealthSuccess",
        "body": "Hud.SetMissionHealthSuccess(${boolean})$0"
    },
    "Hud.SetMissionProgressVisible()":
    {
        "prefix": "Hud.SetMissionProgressVisible",
        "body": "Hud.SetMissionProgressVisible(${boolean})$0"
    },
    "Hud.ClearMissionProgress()":
    {
        "prefix": "Hud.ClearMissionProgress",
        "body": "Hud.ClearMissionProgress()$0"
    },
    "Hud.SetMissionProgressState()":
    {
        "prefix": "Hud.SetMissionProgressState",
        "body": "Hud.SetMissionProgressState(${MissionProgressState}, ${slot})$0"
    },
    "Hud.SetMissionProgressText()":
    {
        "prefix": "Hud.SetMissionProgressText",
        "body": "Hud.SetMissionProgressText(${text}, ${slot})$0"
    },
    "Hud.ShowHintText()":
    {
        "prefix": "Hud.ShowHintText",
        "body": "Hud.ShowHintText(${text}, ${time})$0"
    },
    "Hud.HideHintText()":
    {
        "prefix": "Hud.HideHintText",
        "body": "Hud.HideHintText()$0"
    },
    "Hud.ShowInfoPopup()":
    {
        "prefix": "Hud.ShowInfoPopup",
        "body": "Hud.ShowInfoPopup(${text}, ${time})$0"
    },
    "Hud.HideInfoPopup()":
    {
        "prefix": "Hud.HideInfoPopup",
        "body": "Hud.HideInfoPopup()$0"
    },
    "Hud.ShouldRender":
    {
        "prefix": "Hud.ShouldRender",
        "body": "Hud.ShouldRender$0"
    },

    // Metrics
    "Metrics.SimTime: float":
    {
        "prefix": "Metrics.SimTime",
        "body": "Metrics.SimTime$0"
    },
    "Metrics.SimTimeDelta: float":
    {
        "prefix": "Metrics.SimTimeDelta",
        "body": "Metrics.SimTimeDelta$0"
    },
    "Metrics.SimTimeScale: float":
    {
        "prefix": "Metrics.SimTimeScale",
        "body": "Metrics.SimTimeScale$0"
    },

    // PDA
    "PDA.EndPhoneCall()":
    {
        "prefix": "PDA.EndPhoneCall",
        "body": "PDA.EndPhoneCall()$0"
    },
    "PDA.AddContact()":
    {
        "prefix": "PDA.AddContact",
        "body": "PDA.AddContact(${name}, ${portrait}, ${callback})$0"
    },
    "PDA.RemoveContact()":
    {
        "prefix": "PDA.RemoveContact",
        "body": "PDA.RemoveContact(${name})$0"
    },

    // ProgressionTracker
    "ProgressionTracker.Find(): GameSlice":
    {
        "prefix": "ProgressionTracker.Find",
        "body": "ProgressionTracker.Find(${name}, ${searchDisabledSlices})$0"
    },
    "ProgressionTracker.ForceSliceChange()":
    {
        "prefix": "ProgressionTracker.ForceSliceChange",
        "body": "ProgressionTracker.ForceSliceChange(${slice}, ${simulateRewards})$0"
    },
    "ProgressionTracker.MoveAllSlicesInDisabledList()":
    {
        "prefix": "ProgressionTracker.MoveAllSlicesInDisabledList",
        "body": "ProgressionTracker.MoveAllSlicesInDisabledList()$0"
    },

    // SimObject
    "SimObject.Create(): SimObject":
    {
        "prefix": "SimObject.Create",
        "body": "SimObject.Create(${model}, Vector3(${x}, ${y}, ${z}), Vector3(${rx}, ${ry}, ${rz}))$0"
    },
    "SimObject.GetHead(): SimObject":
    {
        "prefix": "SimObject.GetHead",
        "body": "SimObject.GetHead()$0"
    },
    "SimObject.GetNext(): SimObject":
    {
        "prefix": [ "SimObject.GetNext", "GetNext" ],
        "body": "GetNext()$0"
    },
    "SimObject.SetDestroyOnUnload()":
    {
        "prefix": [ "SimObject.SetDestroyOnUnload", "SetDestroyOnUnload" ],
        "body": "SetDestroyOnUnload(${toggle})$0"
    },
    "SimObject.Destroy()":
    {
        "prefix": [ "SimObject.Destroy", "Destroy" ],
        "body": "Destroy()$0"
    },
    "SimObject.Restore()":
    {
        "prefix": [ "SimObject.Restore", "Restore" ],
        "body": "Restore()$0"
    },
    "SimObject.Suspend()":
    {
        "prefix": [ "SimObject.Suspend", "Suspend" ],
        "body": "Suspend()$0"
    },
    "SimObject.GetName(): Hash":
    {
        "prefix": [ "SimObject.GetName", "GetName" ],
        "body": "GetName()$0"
    },
    "SimObject.GetPropertyName(): Hash":
    {
        "prefix": [ "SimObject.GetPropertyName", "GetPropertyName" ],
        "body": "GetPropertyName()$0"
    },
    "SimObject.GetType(): SimObjectType":
    {
        "prefix": [ "SimObject.GetType", "GetType" ],
        "body": "GetType()$0"
    },
    "SimObject.GetPosition(): Vector3":
    {
        "prefix": [ "SimObject.GetPosition", "GetPosition" ],
        "body": "GetPosition()$0"
    },
    "SimObject.SetPosition()":
    {
        "prefix": [ "SimObject.SetPosition", "SetPosition" ],
        "body": "SetPosition(Vector3(${x}, ${y}, ${z}))$0"
    },
    "SimObject.GetRotation(): Vector3":
    {
        "prefix": [ "SimObject.GetRotation", "GetRotation" ],
        "body": "GetRotation()$0"
    },
    "SimObject.SetRotation()":
    {
        "prefix": [ "SimObject.SetRotation", "SetRotation" ],
        "body": "SetRotation(Vector3(${x}, ${y}, ${z}))$0"
    },
    "SimObject.GetAttachmentCount(): integer":
    {
        "prefix": [ "SimObject.GetAttachmentCount", "GetAttachmentCount" ],
        "body": "GetAttachmentCount()$0"
    },
    "SimObject.GetAttachments(): array[SimObject]":
    {
        "prefix": [ "SimObject.GetAttachments", "GetAttachments" ],
        "body": "GetAttachments()$0"
    },

    // SimObjectProp
    "SimObjectProp(): SimObjectProp":
    {
        "prefix": "SimObjectProp",
        "body": "SimObjectProp(${SimObject})$0"
    },
    "SimObjectProp.Create(): SimObjectProp":
    {
        "prefix": "SimObjectProp.Create",
        "body": "SimObjectProp.Create(${model}, Vector3(${x}, ${y}, ${z}), Vector3(${rx}, ${ry}, ${rz}))$0"
    },
    "SimObjectProp.IsAttached(): boolean":
    {
        "prefix": [ "SimObjectProp.IsAttached", "IsAttached" ],
        "body": "IsAttached()$0"
    },
    "SimObjectProp.GetAttachBone(): string":
    {
        "prefix": [ "SimObjectProp.GetAttachBone", "GetAttachBone" ],
        "body": "GetAttachBone()$0"
    },
    "SimObjectProp.GetPropBone(): string":
    {
        "prefix": [ "SimObjectProp.GetPropBone", "GetPropBone" ],
        "body": "GetPropBone()$0"
    },

    // SimCharacter
    "SimCharacter(): SimCharacter":
    {
        "prefix": "SimCharacter",
        "body": "SimCharacter(${SimObject})$0"
    },
    "SimCharacter.Create(): SimCharacter":
    {
        "prefix": "SimCharacter.Create",
        "body": "SimCharacter.Create(${model}, Vector3(${x}, ${y}, ${z}), ${heading})$0"
    },
    "SimCharacter.GetLocalPlayer(): SimCharacter":
    {
        "prefix": "SimCharacter.GetLocalPlayer",
        "body": "SimCharacter.GetLocalPlayer()$0"
    },
    "SimCharacter.SetAttackRights()":
    {
        "prefix": [ "SimCharacter.SetAttackRights", "SetAttackRights" ],
        "body": "SetAttackRights(${boolean})$0"
    },
    "SimCharacter.GetTarget(): SimObject":
    {
        "prefix": [ "SimCharacter.GetTarget", "GetTarget" ],
        "body": "GetTarget(${TargetType})$0"
    },
    "SimCharacter.SetTarget()":
    {
        "prefix": [ "SimCharacter.SetTarget", "SetTarget" ],
        "body": "SetTarget(${TargetType}, ${SimObject})$0"
    },
    "SimCharacter.SetTargetLock()":
    {
        "prefix": [ "SimCharacter.SetTargetLock", "SetTargetLock" ],
        "body": "SetTargetLock(${TargetType}, ${lock}, ${modifycollision})$0"
    },
    "SimCharacter.ClearTarget()":
    {
        "prefix": [ "SimCharacter.ClearTarget", "ClearTarget" ],
        "body": "ClearTarget(${TargetType})$0"
    },
    "SimCharacter.PlayActionNode(): boolean":
    {
        "prefix": [ "SimCharacter.PlayActionNode", "PlayActionNode" ],
        "body": "PlayActionNode(${id})$0"
    },
    "SimCharacter.PlayActionNodeByName(): boolean":
    {
        "prefix": [ "SimCharacter.PlayActionNodeByName", "PlayActionNodeByName" ],
        "body": "PlayActionNodeByName(${name})$0"
    },
    "SimCharacter.StopActionNode()":
    {
        "prefix": [ "SimCharacter.StopActionNode", "StopActionNode" ],
        "body": "StopActionNode()$0"
    },
    "SimCharacter.SetAIObjective()":
    {
        "prefix": [ "SimCharacter.SetAIObjective", "SetAIObjective" ],
        "body": "SetAIObjective(${AIObjective})$0"
    },
    "SimCharacter.GetBonesCount(): int":
    {
        "prefix": [ "SimCharacter.GetBonesCount", "GetBonesCount" ],
        "body": "GetBonesCount()$0"
    },
    "SimCharacter.GetBoneName(): string":
    {
        "prefix": [ "SimCharacter.GetBoneName", "GetBoneName" ],
        "body": "GetBoneName(${index})$0"
    },
    "SimCharacter.GetBonePosition(): Vector3":
    {
        "prefix": [ "SimCharacter.GetBonePosition", "GetBonePosition" ],
        "body": "GetBonePosition(${hash})$0"
    },
    "SimCharacter.GetBoneRotation(): Vector3":
    {
        "prefix": [ "SimCharacter.GetBoneRotation", "GetBoneRotation" ],
        "body": "GetBoneRotation(${hash})$0"
    },
    "SimCharacter.AttachProp(): boolean":
    {
        "prefix": [ "SimCharacter.AttachProp", "AttachProp" ],
        "body": "AttachProp(${SimObjectProp})$0"
    },
    "SimCharacter.AttachProp(): [Advanced] boolean":
    {
        "prefix": [ "SimCharacter.AttachProp", "AttachProp" ],
        "body": "AttachProp(${SimObjectProp}, ${CharacterBone}, ${PropBone})$0"
    },
    "SimCharacter.DetachProp(): boolean":
    {
        "prefix": [ "SimCharacter.DetachProp", "DetachProp" ],
        "body": "DetachProp(${SimObjectProp})$0"
    },
    "SimCharacter.GetOccupantState(): CharacterOccupantState":
    {
        "prefix": [ "SimCharacter.GetOccupantState", "GetOccupantState" ],
        "body": "GetOccupantState()$0"
    },
    "SimCharacter.GetCurrentVehicle(): SimVehicle":
    {
        "prefix": [ "SimCharacter.GetCurrentVehicle", "GetCurrentVehicle" ],
        "body": "GetCurrentVehicle()$0"
    },
    "SimCharacter.GetCurrentVehicleSeatIndex(): integer":
    {
        "prefix": [ "SimCharacter.GetCurrentVehicleSeatIndex", "GetCurrentVehicleSeatIndex" ],
        "body": "GetCurrentVehicleSeatIndex()$0"
    },
    "SimCharacter.PlaceInVehicle()":
    {
        "prefix": [ "SimCharacter.PlaceInVehicle", "PlaceInVehicle" ],
        "body": "PlaceInVehicle(${SimVehicle}, ${seatIndex})$0"
    },
    "SimCharacter.FactionClass: FactionClass":
    {
        "prefix": [ "SimCharacter.FactionClass", "FactionClass" ],
        "body": "FactionClass$0"
    },
    "SimCharacter.FightingClass: FightingClass":
    {
        "prefix": [ "SimCharacter.FightingClass", "FightingClass" ],
        "body": "FightingClass$0"
    },
    "SimCharacter.Gender: Gender":
    {
        "prefix": [ "SimCharacter.Gender", "Gender" ],
        "body": "Gender$0"
    },
    "SimCharacter.Heading: float":
    {
        "prefix": [ "SimCharacter.Heading", "Heading" ],
        "body": "Heading$0"
    },
    "SimCharacter.Health: integer":
    {
        "prefix": [ "SimCharacter.Health", "Health" ],
        "body": "Health$0"
    },
    "SimCharacter.HealthMax: integer":
    {
        "prefix": [ "SimCharacter.HealthMax", "HealthMax" ],
        "body": "HealthMax$0"
    },
    "SimCharacter.Invulnerable: boolean":
    {
        "prefix": [ "SimCharacter.Invulnerable", "Invulnerable" ],
        "body": "Invulnerable$0"
    },
    "SimCharacter.TakingDamage: boolean":
    {
        "prefix": [ "SimCharacter.TakingDamage", "TakingDamage" ],
        "body": "TakingDamage$0"
    },
    "SimCharacter.Tired: boolean":
    {
        "prefix": [ "SimCharacter.Tired", "Tired" ],
        "body": "Tired$0"
    },

    // SimVehicle
    "SimVehicle(): SimVehicle":
    {
        "prefix": "SimVehicle",
        "body": "SimVehicle(${SimObject})$0"
    },
    "SimVehicle.Create(): SimVehicle":
    {
        "prefix": "SimVehicle.Create",
        "body": "SimVehicle.Create(${model}, Vector3(${x}, ${y}, ${z}), Vector3(${rx}, ${ry}, ${rz}))$0"
    },
    "SimVehicle.GetDriver(): SimCharacter":
    {
        "prefix": [ "SimVehicle.GetDriver", "GetDriver" ],
        "body": "GetDriver()$0"
    },
    "SimVehicle.GetPassenger(): SimCharacter":
    {
        "prefix": [ "SimVehicle.GetPassenger", "GetPassenger" ],
        "body": "GetPassenger(${index})$0"
    },
    "SimVehicle.GetPrimaryColor(): Color":
    {
        "prefix": [ "SimVehicle.GetPrimaryColor", "GetPrimaryColor" ],
        "body": "GetPrimaryColor()$0"
    },
    "SimVehicle.SetPrimaryColor()":
    {
        "prefix": [ "SimVehicle.SetPrimaryColor", "SetPrimaryColor" ],
        "body": "SetPrimaryColor(Color(${r}, ${g}, ${b}))$0"
    },
    "SimVehicle.GetSecondaryColor(): Color":
    {
        "prefix": [ "SimVehicle.GetSecondaryColor", "GetSecondaryColor" ],
        "body": "GetPrimaryColor()$0"
    },
    "SimVehicle.SetSecondaryColor()":
    {
        "prefix": [ "SimVehicle.SetSecondaryColor", "SetSecondaryColor" ],
        "body": "SetSecondaryColor(Color(${r}, ${g}, ${b}))$0"
    },
    "SimVehicle.GetShaderValue(): float":
    {
        "prefix": [ "SimVehicle.GetShaderValue", "GetShaderValue" ],
        "body": "GetPrimaryColor(${index})$0"
    },
    "SimVehicle.SetShaderValue()":
    {
        "prefix": [ "SimVehicle.SetShaderValue", "SetShaderValue" ],
        "body": "SetShaderValue(${index}, ${value})$0"
    },
    "SimVehicle.EngineDamage: float":
    {
        "prefix": [ "SimVehicle.EngineDamage", "EngineDamage" ],
        "body": "EngineDamage$0"
    },
    "SimVehicle.DoorsLocked: boolean":
    {
        "prefix": [ "SimVehicle.DoorsLocked", "DoorsLocked" ],
        "body": "DoorsLocked$0"
    },
    "SimVehicle.SeatCount: integer":
    {
        "prefix": [ "SimVehicle.SeatCount", "SeatCount" ],
        "body": "SeatCount$0"
    },

    // SimWeapon
    "SimWeapon(): SimWeapon":
    {
        "prefix": "SimWeapon",
        "body": "SimWeapon(${SimObject})$0"
    },
    "SimWeapon.Create(): SimWeapon":
    {
        "prefix": "SimWeapon.Create",
        "body": "SimWeapon.Create(${model}, Vector3(${x}, ${y}, ${z}), Vector3(${rx}, ${ry}, ${rz}))$0"
    },
    "SimWeapon.CreateAndEquip(): SimWeapon":
    {
        "prefix": "SimWeapon.CreateAndEquip",
        "body": "SimWeapon.CreateAndEquip(${SimCharacter}, ${model})$0"
    },
    "SimWeapon.CreateAndEquipStowed(): SimWeapon":
    {
        "prefix": "SimWeapon.CreateAndEquipStowed",
        "body": "SimWeapon.CreateAndEquipStowed(${SimCharacter}, ${model})$0"
    },
    "SimWeapon.GetEquipped(): SimWeapon":
    {
        "prefix": "SimWeapon.GetEquipped",
        "body": "SimWeapon.GetEquipped(${SimCharacter})$0"
    },
    "SimWeapon.GetStowed(): SimWeapon":
    {
        "prefix": "SimWeapon.GetStowed",
        "body": "SimWeapon.GetStowed(${SimCharacter})$0"
    },
    "SimWeapon.IsStowable(): boolean":
    {
        "prefix": [ "SimWeapon.IsStowable", "IsStowable" ],
        "body": "IsStowable()$0"
    },
    "SimWeapon.Equip(): boolean":
    {
        "prefix": [ "SimWeapon.Equip", "Equip" ],
        "body": "Equip(${SimCharacter})$0"
    },
    "SimWeapon.EquipStowed(): boolean":
    {
        "prefix": [ "SimWeapon.EquipStowed", "EquipStowed" ],
        "body": "EquipStowed(${SimCharacter})$0"
    },
    "SimWeapon.ClipAmmo: integer":
    {
        "prefix": [ "SimWeapon.ClipAmmo", "ClipAmmo" ],
        "body": "ClipAmmo$0"
    },
    "SimWeapon.TotalAmmo: integer":
    {
        "prefix": [ "SimWeapon.TotalAmmo", "TotalAmmo" ],
        "body": "TotalAmmo$0"
    },
    "SimWeapon.LastFiredTime: float":
    {
        "prefix": [ "SimWeapon.LastFiredTime", "LastFiredTime" ],
        "body": "LastFiredTime$0"
    },
    "SimWeapon.RateOfFireOverride: float":
    {
        "prefix": [ "SimWeapon.RateOfFireOverride", "RateOfFireOverride" ],
        "body": "RateOfFireOverride$0"
    },

    // TimeOfDayManager
    "TimeOfDayManager.IsAboutToRain(): boolean":
    {
        "prefix": "TimeOfDayManager.IsAboutToRain",
        "body": "TimeOfDayManager.IsAboutToRain()$0"
    },
    "TimeOfDayManager.LockWeather()":
    {
        "prefix": "TimeOfDayManager.LockWeather",
        "body": "TimeOfDayManager.LockWeather(${lock})$0"
    },
    "TimeOfDayManager.GameSecondsPerRealSecond: float":
    {
        "prefix": "TimeOfDayManager.GameSecondsPerRealSecond",
        "body": "TimeOfDayManager.GameSecondsPerRealSecond$0"
    },
    "TimeOfDayManager.SecondsSinceMidnight: float":
    {
        "prefix": "TimeOfDayManager.SecondsSinceMidnight",
        "body": "TimeOfDayManager.SecondsSinceMidnight$0"
    },
    "TimeOfDayManager.OverrideSurfaceWetness: float":
    {
        "prefix": "TimeOfDayManager.OverrideSurfaceWetness",
        "body": "TimeOfDayManager.OverrideSurfaceWetness$0"
    },
    "TimeOfDayManager.RainChance: float":
    {
        "prefix": "TimeOfDayManager.RainChance",
        "body": "TimeOfDayManager.RainChance$0"
    },
    "TimeOfDayManager.Weather: float":
    {
        "prefix": "TimeOfDayManager.Weather",
        "body": "TimeOfDayManager.Weather$0"
    },
    "TimeOfDayManager.WeatherTarget: float":
    {
        "prefix": "TimeOfDayManager.WeatherTarget",
        "body": "TimeOfDayManager.WeatherTarget$0"
    },
    "TimeOfDayManager.WeatherRandomInterval: float":
    {
        "prefix": "TimeOfDayManager.WeatherRandomInterval",
        "body": "TimeOfDayManager.WeatherRandomInterval$0"
    },
    "TimeOfDayManager.WindDirection: float":
    {
        "prefix": "TimeOfDayManager.WindDirection",
        "body": "TimeOfDayManager.WindDirection$0"
    },
    "TimeOfDayManager.WindSpeed: float":
    {
        "prefix": "TimeOfDayManager.WindSpeed",
        "body": "TimeOfDayManager.WindSpeed$0"
    },
    "TimeOfDayManager.WindSpeedTarget: float":
    {
        "prefix": "TimeOfDayManager.WindSpeedTarget",
        "body": "TimeOfDayManager.WindSpeedTarget$0"
    },

    // Callbacks
    "Callback: OnCollision":
    {
        "prefix": [ "function OnCollision(CollisionData)", "OnCollision" ],
        "body": "function OnCollision(CollisionData)\n{\n\t$0\n}"
    },
    "Callback: OnCharacterDeath":
    {
        "prefix": [ "function OnCharacterDeath(SimCharacter)", "OnCharacterDeath" ],
        "body": "function OnCharacterDeath(SimCharacter)\n{\n\t$0\n}"
    },
    "Callback: OnGameUpdate":
    {
        "prefix": [ "function OnGameUpdate()", "OnGameUpdate" ],
        "body": "function OnGameUpdate()\n{\n\t$0\n}"
    },
    "Callback: OnRender":
    {
        "prefix": [ "function OnRender(Renderer)", "OnRender" ],
        "body": "function OnRender(Renderer)\n{\n\t$0\n}"
    },
    "Callback: OnUnload":
    {
        "prefix": [ "function OnUnload()", "OnUnload" ],
        "body": "function OnUnload()\n{\n\t$0\n}"
    },
    "Callback: OnVehicleDeath":
    {
        "prefix": [ "function OnVehicleDeath(SimVehicle)", "OnVehicleDeath" ],
        "body": "function OnVehicleDeath(SimVehicle)\n{\n\t$0\n}"
    },
}
